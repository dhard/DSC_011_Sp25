# tAPP15

- Class: meta
  Course: DSC_011_Sp25
  Lesson: tAPP15_Data-Frames_and_Factors
  Author: David H. Ardell
  Type: Standard
  Organization: UC Merced
  Version: 2.4.5

- Class: text
  Output: "Welcome to tAPP15 with more lessons on working with vector selections, factors, and data-frames in R."

# vector selections

- Class: text
  Output: "Last time, we practiced various ways of selecting elements from vectors, for example using logical vectors or
  indices returned by the order() function with the vector selection operator [."
  
- Class: text
  Output: "Let's review a few more fine points about vector selections."
  
- Class: text
  Output: "We'll practice making selections from the built-in character vector 
  called \"letters\" containing the 26 lower-case letters of the English alphabet."
  
- Class: cmd_question
  Output: "Examine the value of the letters vector now."
  CorrectAnswer: letters
  AnswerTests: omnitest(correctExpr='letters')
  Hint: "Evaluate the R expression \n\n letters"

- Class: cmd_question
  Output: "Great! Now use the range operator (:) to select the first eight elements of the letters vector."
  CorrectAnswer: letters[1:8]
  AnswerTests: omnitest(correctExpr='letters[1:8]')
  Hint: "The range exression 3:6 evaluates to the same value as the numeric vector c(3,4,5,6). 
  Try using a range expression inside the vector selection operator ([ ])."
  
- Class: text
  Output: "R vectors don't throw errors if you pass in indices larger than their length, they 
  just return the missing data value NA."

- Class: cmd_question
  Output: "See for yourself! Examine the value of \n\n letters[27]"
  CorrectAnswer: letters[27]
  AnswerTests: omnitest(correctExpr='letters[27]')
  Hint: "Evaluate letters[27]"

- Class: text
  Output: "Any valid R expression that evaluates to a vector of integers can be used with the 
  selection operator, which allows you to select the same elements repeatedly and in any order."

- Class: cmd_question
  Output: "Use the rep() function with a range argument inside a selection on the letters vector 
  to create a character vector in which the last six letters of the alphabet, in alphabetical 
  order, are each repeated three times."
  CorrectAnswer: letters[rep(21:26,each=3)]
  AnswerTests: omnitest(correctExpr='letters[rep(21:26,each=3)]')
  Hint: "The output should look like  \n\n [1] \"u\" \"u\" \"u\" \"v\" \"v\" \"v\" \"w\" \"w\" \"w\"
  \"x\" \"x\" \"x\" \"y\" \"y\" \"y\" \"z\" \"z\" \"z\""

- Class: text
  Output: "In R vector selections, negative indicies imply exclusion of the corresponding elements from 
  the selection. For example, \n\n letters[-1] \n\n excludes \"a\" and evaluates the same as \n\n letters[2:26]." 

- Class: text
  Output: "Mixing positive and negative indices in a selection results in an error. Because operators are
  vectorized, you can use an expression like \n\n -c(1,2,3) \n\n to exclude multiple elements from a selection."

- Class: cmd_question
  Output: "Write a selection using the seq() function to make a character vector that excludes every 
  third letter from the alphabet (this example is most easily computed using negative indices)."
  CorrectAnswer: letters[-seq(3,26,by=3)]
  AnswerTests: omnitest(correctExpr='letters[-seq(3,26,by=3)]')
  Hint: "The output should look like \n\n [1] \"a\" \"b\" \"d\" \"e\" \"g\" \"h\" \"j\" \"k\" \"m\" \"n\" 
  \"p\" \"q\" \"s\" \"t\" \"v\" \"w\" \"y\" \"z\""

- Class: text
  Output: "Now we have covered most of the ins and outs of vector selection expressions in R." 
  
- Class: text
  Output: "Let's turn to study factors, which are a special class of integer vectors in R that model categorical data, especially in 
  regression and other modeling applications."

- Class: video
  Output: "To better understand R factors, please take a minute to study the typology of statistical data from 
  a figure I posted to a Page on CatCourses. Would you like swirl to open this page for you in your browser?"
  VideoLink: https://catcourses.ucmerced.edu/courses/33897/pages/types-of-statistical-data

- Class: text
  Output: "From this figure, we see that categorical statistical variables are non-numerical variables such as 
  \"eye color\" or \"month of birth\"."

- Class: text
  Output: "We also see that categorical variables may be further classified as nominal or ordinal variables."  
  
- Class: text
  Output: "Nominal variables such as \"eye color\" can take one from a set of alternative values for which there exists 
  no natural order. For example, blue eye-color is not less than, greater than, or equal to brown eye-color."
  
- Class: text
  Output: "Ordinal variables such as \"month of birth\" can take alternative values that have a natural order. For exmaple, 
  \"January\" comes before \"February\" and \"hot\" is hotter than \"warm\" which is warmer than \"cool\"."
  
- Class: text
  Output: "In either case, the different alternative values that a factor can take are called its \"levels\"."
    
- Class: cmd_question
  Output: "To see factors in action, examine the iris data-set built-in to R by evaluating its name"
  CorrectAnswer: iris
  AnswerTests: omnitest(correctExpr='iris')
  Hint: "Evaluate the R-expression \"iris\""

- Class: cmd_question
  Output: "Also look at the structure summary of the iris data-frame, using the str() function"
  CorrectAnswer: str(iris)
  AnswerTests: omnitest(correctExpr='str(iris)')
  Hint: "Evaluate the R-expression \"str(iris)\""

- Class: cmd_question
  Output: "And finally look at the statistical summary of the iris data-frame, using the summary() function"
  CorrectAnswer: summary(iris)
  AnswerTests: omnitest(correctExpr='summary(iris)')
  Hint: "Evaluate the R-expression \"summary(iris)\""

- Class: text
  Output: "In the documentation for iris, which you can access with \"?iris\" or \"help(iris),\" you can learn that 
  \"This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of the variables 
  sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris.
  The species are Iris setosa, versicolor, and virginica.\""

- Class: cmd_question
  Output: "Use the name-selection operator ($) to print the Species field of iris."
  CorrectAnswer: iris$Species
  AnswerTests: omnitest(correctExpr='iris$Species')
  Hint: "Evaluate the R-expression \"iris$Species\""
 
- Class: mult_question
  Output: Test your understanding! What kind of categorical statistical variable is Species in iris?
  AnswerChoices: nominal;ordinal;both;neither
  CorrectAnswer: nominal
  AnswerTests: omnitest(correctVal='nominal')
  Hint: Is there a natural order to different species of irises?
 
- Class: cmd_question
  Output: "Use up-arrow and ctrl-a, ctrl-e command-line editing to wrap the Species factor of iris with the levels() 
  function, to see its levels."
  CorrectAnswer: levels(iris$Species)
  AnswerTests: omnitest(correctExpr='levels(iris$Species)')
  Hint: "Evaluate the R-expression \"levels(iris$Species)\"" 

- Class: text
  Output: "One of the main uses of factors in R is to enforce data consistency; that is, to enforce that its values all belong
  to a pre-defined set of levels. In practice this guards against treating alternative spellings as belonging to distinct categories." 

- Class: cmd_question
  Output: "To examine the consequences of this in R, first notice that you can chain selection operators. Write an expression to extract the first element 
  of the Species factor of iris."
  CorrectAnswer: iris$Species[1]
  AnswerTests: omnitest(correctExpr='iris$Species[1]')
  Hint: "Use the vector selection operator [ ] on the named-column selection expression \"iris$Species\"" 

- Class: cmd_question
  Output: "Now use up-arrow and command-line editing to modify this selection expression to try to assign the value \"Setosa\" 
  to the first element of the Species factor of iris." 
  CorrectAnswer: iris$Species[1]<-"Setosa"
  AnswerTests: omnitest(correctExpr='iris$Species[1]<-"Setosa"')
  Hint: "Assign the value to the chained selection from the last problem." 

- Class: text
  Output: "Did you get a warning \"invalid factor level, NA generated\"?"

- Class: text
  Output: "Even though a warning was generated, R did change the value of Species for the first iris in the dataset." 

- Class: cmd_question
  Output: "To see this, print the first ten rows of iris with the head() function." 
  CorrectAnswer: head(iris)
  AnswerTests: omnitest(correctExpr='head(iris)')
  Hint: "Call the head() function on iris."

- Class: text
  Output: "It may be surprising that R appears to let you change the value of built-in data objects like iris, 
  but these changes are only temporary. Behind the scenes, R creates a new copy of iris holding the changes 
  which masks the built-in data object. The original value of iris will be restored when you restart R, or 
  if you remove the newly created data-frame iris that is masking the original pre-defined one with the command rm(iris)."

- Class: cmd_question
  Output: "Try removing the altered copy of iris with the command rm(iris)." 
  CorrectAnswer: rm(iris)
  AnswerTests: omnitest(correctExpr='rm(iris)')
  Hint: "Evaluate rm(iris)."

- Class: cmd_question
  Output: "Now print the first ten rows of iris with the head() function again." 
  CorrectAnswer: head(iris)
  AnswerTests: omnitest(correctExpr='head(iris)')
  Hint: "Call the head() function on iris."

- Class: text
  Output: "Did you see that the original value of iris was restored?"

- Class: text
  Output: "To \"re-level\" a factor, that is to update the name(s) of one or more levels, and all of the 
  corresponding elements in the factor correspondingly, assign a character vector with the new level names   
  to the levels() function." 
  
- Class: cmd_question
  Output: "Try it! Assign the first three elements of the LETTERS vector to the levels of the Species vector of iris." 
  CorrectAnswer: levels(iris$Species)<-LETTERS[1:3]
  AnswerTests: omnitest(correctExpr='levels(iris$Species)<-LETTERS[1:3]')
  Hint: "Use LETTERS[1:3] as the right-hand side of the assignment. In R you can assign directly to a function 
  expression. Here you want to use the function levels()"
  
- Class: cmd_question
  Output: "Now examine the effect of the assignment on iris$Species."
  CorrectAnswer: iris$Species
  AnswerTests: omnitest(correctExpr='iris$Species')
  Hint: "Evaluate iris$Species"

- Class: text
  Output: "By default, factors in R are unordered and represent nominal variables. Ordered factors are useful to 
  specify the order of levels for various plotting and modeling functions, and for sorting data." 

- Class: text
  Output: "For example, suppose that the birth months of the youngest five students in our class are given by the character
  vector c(\"December\",\"February\",\"April\",\"February\",\"January\") by increasing age." 

- Class: cmd_question
  Output: "Try sorting this character vector with the function sort(), to see that its default sort order is alphabetical, 
  which is not very useful."
  CorrectAnswer: sort(c("December","February","April","February","January"))
  AnswerTests: omnitest(correctExpr='sort(c("December","February","April","February","January"))')
  Hint: "Evaluate the R-expression \n\n sort(c(\"December\",\"February\",\"April\",\"February\",\"January\"))"

- Class: cmd_question
  Output: "Handily, R provides the built-in month.name character vector; evaluate this name to see its value:"
  CorrectAnswer: month.name
  AnswerTests: omnitest(correctExpr='month.name')
  Hint: "Evaluate the R-expression month.name"

- Class: cmd_question
  Output: "(Suppose you didn't know there was a defined object called month.name. How would you find it? Like Bash, 
  R provides tab-completion on defined functions and variables. Try it. At the R prompt, enter \"month.\" and hit the Tab key twice to 
  call up all of the objects in th eenvironment whose names start with \"month.\". What is the name of a second pre-defined character vector that 
  starts with the prefix \"month.\" and holds three letter abbreviations of the months?"
  CorrectAnswer: month.abb
  AnswerTests: omnitest(correctExpr='month.abb')
  Hint: "Use tab-completion to find the other named character vector."

- Class: cmd_question
  Output: "To make a factor from a character vector, use the factor() or ordered() functions. Evaluate the following expression
  to define the factor months:\n\n months <- factor(c(\"December\",\"February\",\"April\",\"February\",\"January\"),levels=month.name, ordered=T)"
  CorrectAnswer: months <- factor(c("December","February","April","February","January"),levels=month.name, ordered=T)
  AnswerTests: omnitest(correctExpr='months <- factor(c("December","February","April","February","January"),levels=month.name, ordered=T)')
  Hint: "Copy, paste and evaluate the R-expression exactly as shown."

- Class: cmd_question
  Output: "Now examine how ordered factors are printed by evaluating the name months"
  CorrectAnswer: months
  AnswerTests: omnitest(correctExpr='months')
  Hint: "Evaluate the name months"

- Class: cmd_question
  Output: "Also, please use sort() on the months factor to see how ordered factors are sorted."
  CorrectAnswer: sort(months)
  AnswerTests: omnitest(correctExpr='sort(months)')
  Hint: "Evaluate the expression name(months)"

- Class: text
  Output: "In tAPP13, I asked you to specify what the explanatory variable is in a histogram of the Nile data. 
  The correct answer was \"flow in (some magnitude of) cubic meters\". Strictly and technically speaking, this is not true." 

- Class: text
  Output: "In computing the histogram, the sample of annual flows was cut into a set of disjoint histogram 
  bins that span the range of the response variable, that is, the flows of the Nile river." 

- Class: text
  Output: "So the explanatory variable in a histogram is a set of bins representing ranges of flow. 
  These bins are uniquely ordered by non-overlapping ranges of flow that they span. Thus the bin categories 
  are an ordinal categorical variable, and the explanatory variable of the Nile histogram is 
  \"an ordered factor representing flow in (a magnitude of) cubic meters\"." 

- Class: text
  Output: "Relatedly, the R function cut() is used to convert a numeric variable into an ordered factor. 
  If an integer number larger than 1 is provided through the breaks= mandatory argument to cut(), then by default 
  an ordered factor will be created by dividing the range of the variable into that number of equal length intervals." 

- Class: cmd_question
  Output: "Try it! Use cut() to create an ordered factor of the Nile data with three levels."
  CorrectAnswer: cut(Nile,breaks=3)
  AnswerTests: omnitest(correctExpr='cut(Nile,breaks=3)')
  Hint: "Call cut() on Nile and pass 3 to the breaks argument."

- Class: text
  Output: "By default the names of the levels encode the breakpoints of the cut. Provide the
  character vector c(\"low\",\"medium\",\"high\") to the labels= optional argument to cut in order
  to give the levels useful names." 

- Class: cmd_question
  Output: "Try it! Use up-arrow and command-line editing to add the the labels= optional argument to cut 
  and provide as argument the character vector c(\"low\",\"medium\",\"high\") in order
  to give the levels useful names."
  CorrectAnswer: cut(Nile,breaks=3,labels=c("low","medium","high"))
  AnswerTests: omnitest(correctExpr='cut(Nile,breaks=3,labels=c("low","medium","high"))')
  Hint: "Call cut() with the labels optional argument to provide the indicated labels."

- Class: cmd_question
  Output: "Tally up the frequencies of each category of flow in the data by using up-arrow ctrl-a, ctrl-e command-line editing 
  to wrap your last command in the table() function."
  CorrectAnswer: table(cut(Nile,breaks=3,labels=c("low","medium","high")))
  AnswerTests: omnitest(correctExpr='table(cut(Nile,breaks=3,labels=c("low","medium","high")))')
  Hint: "Wrap your last correct R expression to cut() with the table() function."

- Class: cmd_question
  Output: "Try it! Use up-arrow and command-line editing to add the the labels= optional argument to cut 
  and provide as argument the character vector c(\"low\",\"medium\",\"high\") in order
  to give the levels useful names."
  CorrectAnswer: cut(Nile,breaks=3,labels=c("low","medium","high"))
  AnswerTests: omnitest(correctExpr='cut(Nile,breaks=3,labels=c("low","medium","high"))')
  Hint: "Call cut() with the labels optional argument to provide the indicated labels."

- Class: cmd_question
  Output: "The output of table() shows that in R, it is not just the elements of lists that can have names. 
  Elements of vectors can have names too. To see this, use command-line editing to wrap your last command with the
  function names()."
  CorrectAnswer: names(table(cut(Nile,breaks=3,labels=c("low","medium","high"))))
  AnswerTests: omnitest(correctExpr='names(table(cut(Nile,breaks=3,labels=c("low","medium","high"))))')
  Hint: "Wrap your last correct R expression to table() with the names() function."

- Class: text
  Output: "Fantastic! Now let's turn to data-frames, including importing, selecting and sorting them by column values."

- Class: text
  Output: "This lesson includes validated copies of the baby_clean.csv and baby_letters.txt files that we have been working on. 
  To practice importing csv and tab-delimited data in R you need to provide a UNIX filepath to the files you want to import."

- Class: cmd_question
  Output: "This lesson provides the path to the baby_clean.csv file in a one-element character vector called \"baby_clean_data_path\".
  Evaluate this name to see its path."
  CorrectAnswer: baby_clean_data_path
  AnswerTests: omnitest(correctExpr='baby_clean_data_path')
  Hint: "Evaluate baby_clean_data_path"

- Class: cmd_question
  Output: "Try to import the baby_clean data with the R command \"baby_clean <- read.csv(baby_clean_data_path)"
  CorrectAnswer: baby_clean <- read.csv(baby_clean_data_path)
  AnswerTests: omnitest(correctExpr='baby_clean <- read.csv(baby_clean_data_path)')
  Hint: "Evaluate baby_clean <- read.csv(baby_clean_data_path)"

- Class: text
  Output: "To see that something went wrong with importing this data using the default of read.csv(), 
  examine the dimensions (numbers of rows and columns) of the baby_clean data-frame using the dim() function."

- Class: cmd_question
  Output: "To see that something went wrong with importing this data using the default of read.csv(), 
  examine the dimensions (numbers of rows and columns) of the baby_clean data-frame using the dim() function."
  CorrectAnswer: dim(baby_clean)
  AnswerTests: omnitest(correctExpr='dim(baby_clean)')
  Hint: "Evaluate dim(baby_clean)"

- Class: text
  Output: "Remember, there are supposed to be 2800 rows in this data but we obtained 2799!"
  
- Class: cmd_question
  Output: "Let's inspect the data to learn more what went wrong. Use the head() function to print the first 10 rows of baby_clean."
  CorrectAnswer: head(baby_clean)
  AnswerTests: omnitest(correctExpr='head(baby_clean)')
  Hint: "Evaluate head(baby_clean)"  

- Class: text
  Output: "It appears that by default, read.csv() expects there to be header row as the first line of the file to name the data-frame 
  rows."
  
- Class: cmd_question
  Output:   "In order to read this data correctly, we need to tell read.csv() that there is no header line for the data by passing 
  the optional argument header=F to read.csv(). In R you can abbreviate TRUE as T and FALSE as F. Use command-line editing to add this
  optional argument to the call to read.csv()"
  CorrectAnswer: baby_clean <- read.csv(baby_clean_data_path,header=F)
  AnswerTests: omnitest(correctExpr='baby_clean <- read.csv(baby_clean_data_path,header=F)')
  Hint: "Pass header=F to your call to read.csv() to read in the baby_clean data correctly."    

- Class: cmd_question
  Output: "Inspect the data again using the head() function to validate the import."
  CorrectAnswer: head(baby_clean)
  AnswerTests: omnitest(correctExpr='head(baby_clean)')
  Hint: "Evaluate head(baby_clean)"  

- Class: text
  Output: "Now let's name the columns in baby_clean. We can practice using c() and paste() to generate these names."
  
- Class: cmd_question
  Output:   "First, inspect the value of the expression \n\n paste(rep(c(\"boy\",\"girl\"),each=2),c(\"name\",\"freq\"),sep=\"_\")"
  CorrectAnswer: paste(rep(c("boy","girl"),each=2),c("name","freq"),sep="_"")
  AnswerTests: omnitest(correctExpr='paste(rep(c("boy","girl"),each=2),c("name","freq"),sep="_")')
  Hint: "Evaluate the expression paste(rep(c(\"boy\",\"girl\"),each=2),c(\"name\",\"freq\"),sep=\"_\")"  

- Class: cmd_question
  Output:   "These are good names for the last four columns of baby_clean. Now use command-line editing to wrap the previous expression 
  with the c() function, and add the labels \"decade\" and \"rank\" to the beginning of the character vector."
  CorrectAnswer: c("decade","rank",paste(rep(c("boy","girl"),each=2),c("name","freq"),sep="_"))
  AnswerTests: omnitest(correctExpr='c("decade","rank",paste(rep(c("boy","girl"),each=2),c("name","freq"),sep="_"))')
  Hint: "Edit the expression paste(rep(c(\"boy\",\"girl\"),each=2),c(\"name\",\"freq\"),sep=\"_\") as instructed."  

- Class: cmd_question
  Output:   "Now use assignment on names(baby_clean) to set the names of the columns to the return value of this expression."
  CorrectAnswer: names(baby_clean) <- c("decade","rank",paste(rep(c("boy","girl"),each=2),c("name","freq"),sep="_"))
  AnswerTests: omnitest(correctExpr='names(baby_clean) <- c("decade","rank",paste(rep(c("boy","girl"),each=2),c("name","freq"),sep="_"))')
  Hint: "Make an assignment to the function names(baby_clean)."  

- Class: cmd_question
  Output: "Inspect baby_clean again using the head() function to validate that the renaming of variables worked."
  CorrectAnswer: head(baby_clean)
  AnswerTests: omnitest(correctExpr='head(baby_clean)')
  Hint: "Evaluate head(baby_clean)"  

- Class: text
  Output: "In R, data-frames are implemented as lists of vectors, each of which must be the same length. 
  Importing data-frames will fail unless all of the rows are complete and all of the columns have the same number of elements."
  
- Class: cmd_question
  Output:   "Validate that baby_clean is a list by evaluating its data mode with the mode() function"
  CorrectAnswer: mode(baby_clean)
  AnswerTests: omnitest(correctExpr='mode(baby_clean)')
  Hint: "Evaluate mode(baby_clean)"  

- Class: cmd_question
  Output:   "Inspect the structure of the baby_clean data-frame using the str() function."
  CorrectAnswer: str(baby_clean)
  AnswerTests: omnitest(correctExpr='str(baby_clean)')
  Hint: "Evaluate str(baby_clean)"  


- Class: text
  Output: "Congratulations on completing tAPP15! 
  Please quit R with q() and upload your R output file tAPP15.txt 
  to CatCourses. You do not need to save the workspace image when you quit R."

