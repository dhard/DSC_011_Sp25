#   tAPP22_Tidy_Data,_Pivots_and_Advanced_Graph_Expressions

- Class: meta
  Course: DSC_011_Sp25
  Lesson:  tAPP22_Tidy_Data,_Pivots_and_Advanced_Graph_Expressions
  Author: David H. Ardell
  Type: Standard
  Organization: UC Merced
  Version: 2.4.5

- Class: text
  Output: "Welcome to tAPP22, with a focus on tidy data, pivoting tibbles in the tidyverse, 
  and using tidy data to make publication-quality graphs with ggplot2." 
  
- Class: text
  Output: "Like last time, in this lesson we'll develop R/tidyverse and ggplot2 graph 
  expressions interactively in the R Console and save our finalized and edited code in 
  code chunks in a Quarto Notebook for tAPP22 that you'll export to HTML. You should 
  have already installed some prerequisite packages before starting this lesson." 
  
- Class: text
  Output: "For your convenience, package dependencies of this swirl lesson 
  are already preloaded by swirl. 
  An R code chunk at the top of your tAPP22 notebook has already been 
  provided that loads the package dependencies for this lesson for when you 
  render your notebook. Test it by rendering your notebook now."   
  
- Class: text
  Output: "Last time when finishing tAPP21, we used transparency (alpha) to improve the first 
  draft of a density plot of body masses of three species of penguins from the 
  palmerpenguins dataset."   

- Class: text
  Output: "Let's pick up where we left off and improve this rough-draft plot, 
  interactively and successively, to the point of publication quality, using 
  the grammar of graphics in ggplot2." 
  
- Class: cmd_question
  Output:   "First, let's regenerate the last graph that we made by evaluating the ggplot2 graph expression \n\n
  ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5)"
  CorrectAnswer:  ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5)
  AnswerTests: omnitest(correctExpr='ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5)')
  Hint: "Evaluate the expression as given."  
  
- Class: text
  Output: "First, let's see if we can get rid of the warning \"Removed 2 rows containing non-finite outside the scale range\"."
  
  
- Class: text
  Output: "Suppose that this cryptic warning is caused by the presence of two NA values in the vector of body masses of penguins. Let's test this hypothesis interactively."   
  
- Class: cmd_question
  Output:   "Use the $ name-selection operator on penguins to select the body mass variable (RStudio will make it easy to find the name of this variable and complete it) and write a base-R expression using the sum() and is.na() functions on this selection to verify that it contains two NA missing values."
  CorrectAnswer:  sum(is.na(penguins$body_mass_g))
  AnswerTests: omnitest(correctExpr='sum(is.na(penguins$body_mass_g))')
  Hint: "Select body masses from penguins using the base-R name-selection operator, pass it as input to is.na() and pass the output to sum(). Use base-R composed functions wrapping is.na() with sum(), not base-R pipes."   

- Class: cmd_question
  Output:   "ggplot2 graph expressions usually appear at the ends of R/tidyverse pipelines, which are 
  made by concatenating tidyverse and base-R functions with the |> base-R pipe operator.\n Often these pipelines 
  start with the tibble name. \n After all it is easier to understand \n\n data |> select() |> summarize() \n\n 
  then \n\n summarize(select(data))\n\n  
  To get rid of the warning from the call to ggplot(), let's use up-arrow command-line editing to 
  edit the graph expression from two commands ago. First pipe the tibble penguins into the tidyverse drop_na()  
  function to filter out rows containing NA, and then pipe its output through our previous graph expression. 
  Be sure to remove penguins as the first argument in your new call to ggplot()."
  CorrectAnswer:  penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5)
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5)')
  Hint: "Use the base-R pipe operator (|>) twice before the graph expression. 
  Start with the penguins tibble, pipe it to drop_na() with no arguments, and then pipe to a call to ggplot(aes()), that is omitting penguins as first argument to ggplot()"

- Class: text
  Output:   "Did you notice that the warning disappeared now? Let's now focus on making this graph publication quality."
  
- Class: text
  Output:   "By applying the principles of good visualization to this graph, we see that 
  ggplot2's default color palette is not color-blind friendly because it depends on a 
  red-green contrast. Let's make the graph more color-blind-friendly by using the Okabe-Ito
  qualitative color palette, which we have already provided and loaded in the extension package called ggokabeito."

- Class: text
  Output:   "In the call to aes() we are associating two different aesthetics with the species
  variable/column in the penguins tibble: color and fill. The first corresponds to the color of 
  points and lines, while the second corresponds to the fill-color of shapes like densities, 
  polygons, violins, and other two-dimensional aesthetics."
  
- Class: text
  Output:   "To set different color palettes to these two aesthetics in a ggplot2 graph
  expression, we simply use the plus operator (+) to extend the graph expressions with calls to 
  functions with prefixes like \"scale_color_...()\" and  \"scale_fill_...()\". Each call 
  changes the color-palette of one of the aesthetics." 

- Class: text
  Output:   "For example, the ggokabeito package provides functions scale_color_okabe_ito() 
  and scale_fill_okabe_ito()."  

- Class: text
  Output:   "In general, each part of a graph expression connected by the plus operator (+), 
  after the call to ggplot(aes()), may be provided 
  in any order to mostly the same effect on the final plot. "

- Class: cmd_question
  Output:   "Use up-arrow command-line editing to extend the previous ggplot2 graph expression, in the last 
  part of the R/tidyverse pipeline, with calls to scale_color_okabe_ito() and scale_fill_okabe_ito() using 
  the plus operator. Write the graph expression with the geom_density(), scale_color_okabe_ito() and
   scale_fill_okabe_ito() parts in this specific order."
  CorrectAnswer: penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito()
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito()')
  Hint: "Extend the previous ggplot2 graph expression using the plus (+) operator with calls to 
  scale_color_okabe_ito() and scale_fill_okabe_ito() in that order."  

- Class: cmd_question
  Output:   "Now let's extend the graph expression further to fix the x-axis and y-axis labels. Keep using 
  command-line editing to extend the 
  graph expression using the plus operator (+) with a call to the ggplot2 labs() function. Using x as 
  the first argument to labs(), assign the string \"Body Mass (g)\" as the x-axis 
  label. Using y as the second argument to labs(), assign the string \"Density\" as the y-axis label."
  CorrectAnswer: penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito() + labs(x="Body Mass (g)",y="Density")
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill =  species)) + geom_density(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito() + labs(x="Body Mass (g)",y="Density")')
  Hint: "Extend the previous ggplot2 graph expression using the plus (+) operator with a call to 
  labs() to set the x- and y-axis labels. Check ?labs for its documentation and usage."  

- Class: cmd_question
  Output:   "Let's use command-line editing to add additional arguments to the call to labs().
  Using title as a third argument to labs(), assign the string  \"Distribution of Body Mass by Species of Penguin\" 
  as a meaningful title. Using caption as a fourth argument to labs(), 
  assign the string \"data from palmerpenguins.org\" as an attribution of data-source in a caption."
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito() + labs(x="Body Mass (g)",y="Density",,title ="Distribution of Body Mass by Species of Penguin",caption="data from palmerpenguins.org")')
  Hint: "Provide additional arguments to the call to labs() in the previous pipeline. Check ?labs for its documentation and usage."  

- Class: text
  Output: "Let's place the legend in the upper-right corner of the plot to remove dead space and make the 
   data display of density-plots larger."

- Class: cmd_question
  Output:  "Use command-line editing to extend the 
   previous pipeline/graph expression using the plus (+) operator with a call to the ggplot2 theme() function 
   specifying the numeric vector c(0.9, 0.8) as the value of the legend.position argument to theme(). The vector 
   specifies the relative x- and y-coordinates of the legend. The coordinates each range between 0 and 1."
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x = body_mass_g, color = species, fill = species)) + geom_density(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito() + labs(x="Body Mass (g)",y="Density",title ="Distribution of Body Mass by Species of Penguin",caption="data from palmerpenguins.org") + theme(legend.position = c(0.9, 0.8))')
  Hint: "Use the plus operator to extend the terminal graph expression with a call to theme() with argument legend.position=c(0.9, 0.8) as instructed."    
 
- Class: text
  Output:   "This density plot is much better than it was when we started, but some might disagree with the aesthetic of 
  plotting overlapping densities with transparency. Separating the densities by species in a violin plot may be 
  preferable. Fortunately, ggplot2 makes it easy to change the geom, or plot-type, and make a whole new type of graph
  using an existing graph expression with few changes."
  
- Class: cmd_question
  Output:  "Use command-line editing to change the geom of the previous graph expression from geom_density(alpha=0.5) to geom_violin(alpha=0.5). In the aes() call nested inside ggplot(), associate body_mass_g with the y-axis and associate species with the x-axis. To make room for the legend in the new figure, change the coordinates of the legend to x = 0.1 and y = 0.85." 
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x=species, y = body_mass_g, color = species, fill = species)) + geom_violin(alpha=0.5) + scale_color_okabe_ito() + scale_fill_okabe_ito() + labs(x="Body Mass (g)",y="Density",title ="Distribution of Body Mass by Species of Penguin",caption="data from palmerpenguins.org") + theme(legend.position = c(0.1, 0.85))')
  Hint: "Edit the graph expression in place. Change the geom, and edit the aesthetics including both x and y aesthetics in the call to aes() as instructed."    

- Class: cmd_question
  Output:  "Now, remembering that it is preferable to show the raw data in such distributional plots, use command-line editing to insert a call to geom_sina() from the ggforce package after the call to geom_violin using the plus operator (+). Be sure to put the call to geom_sina() right after the call to geom_violin()." 
  AnswerTests: omnitest(correctExpr='penguins |> drop_na() |> ggplot(aes(x=species, y = body_mass_g, color = species, fill = species)) + geom_violin(alpha=0.5) + geom_sina() + scale_color_okabe_ito() + scale_fill_okabe_ito() + labs(x="Body Mass (g)",y="Density",title ="Distribution of Body Mass by Species of Penguin",caption="data from palmerpenguins.org") + theme(legend.position = c(0.1, 0.85))')
  Hint: "Edit the previous graph expression in place. Insert \"+ geom_sina()\" right after the call to \"geom_violin(alpha=0.5)\"."  
  
- Class: text
  Output:   "Now we have finished our first publication-quality graph for this assignment. In your tAPP22 Quarto notebook, under the section \"Publication-Quality Plots with ggplot2\" and in the empty R code chunk under the subsection \"Color-blind-friendly Sina Plots of Body Mass by Penguin Species\", copy your working ggplot2 graph expression and Render the notebook to validate that the density plot in your notebook. Ask for help if you need it."  
 
- Class: text
  Output: "Let's apply our principles of visualization to make some publication-quality scatter-plots using
  ggplot2. "   
 
 
  
# ### color and size aesthetics
# 
# library(pals)
# ggplot(iris, aes(Sepal.Length, Sepal.Width, alpha=0.5, color = Species, size=Petal.Width)) +
#   geom_jitter(height=0.02,width=0.02) + 
#   labs(title="Sepal Width and Length and Petal Width in Three Species of Iris",x="Sepal Length (cm)",y="Sepal Width (cm)",
#  subtitle="Anderson (1935). The Irises of the Gaspe Peninsula,   Bulletin of the American Iris Society 59:2") +
#   scale_color_manual(values=okabe(4)[c(3,2,4)])
# 
# ### color palettes

# ### facet_wrap() is a formula3
# 
- Class: text
  Output: "The tidyverse gets its name from the concept of \"tidy data,\" a specifically 
  \"normalized\" arrangement of data in a data-frame or tibble so that every categorical variable    is represented in its own column with values for every level, and rows correspond to units of 
  observation." 
  
- Class: text
  Output: "We have already learned about data \"scrubbing\" --- processing and cleaning raw data after it is obtained to a conc"    


- Class: text
  Output: "Great work! Congratulations on completing tAPP21! 
  Please render your Quarto Notebook and turn in the rendered HTML output to CatCourses.
  You can save the workspace image if and when you quit R."

